from typing import Dict, List, Tuple
from collections import defaultdict
from heapq import heappush, heappop

class Edge:
    def __init__(self, to: int, weight: int):
        self.to = to
        self.weight = weight

class DijkstraAlgorithm:
    def __init__(self):
        self.graph: Dict[int, List[Edge]] = defaultdict(list)
        self.previous: Dict[int, int] = {}

    def add_edge(self, _from: int, to: int, weight: int):
        self.graph[_from].append(Edge(to, weight))
        self.graph[to].append(Edge(_from, weight))

    def dijkstra(self, start, kon, nom: int, mins: (int, int)):
        pq: List[Tuple[int, int]] = [(0, start)]
        dist: Dict[int, int] = {node: float('inf') for node in self.graph}
        dist[start] = 0

        while pq:
            d, u = heappop(pq)
            if d > dist[u]:
                continue
            for edge in self.graph[u]:
                v, weight = edge.to, edge.weight
                if dist[u] + weight < dist[v]:
                    dist[v] = dist[u] + weight
                    self.previous[v] = u
                    heappush(pq, (dist[v], v))

        for node, distance in dist.items():
            if node== kon:
                mins.append((nom, distance))
    def clear_graph(self):
        self.graph = defaultdict(list)
        self.previous = {}

def main():
    f=open("rgr diskr.txt")
    f=f.readlines()
    count=0
    a=[]
    for i in f:
        count+=1
        a.append(i[:-1])
    a.remove(a[-1])
    a.append(i)
    mins=[(int(a[0])+1,100000)]
    d = DijkstraAlgorithm()
    N = count
    nom=1
    for i in range(1,N):
        a1=a[i].split(" ")
        d.add_edge(int(a1[0])-1, int(a1[1])-1, int(a1[2]))
    print("Введите начальную вершину, а затем конечную")
    start = int(input())
    if start<1:
        print("данные введены некорректно")
        exit()
    kon = int(input())
    if kon>int(a[0]):
        print("данные введены некорректно")
        exit()
    d.dijkstra(start-1, kon-1, nom, mins)
    d.clear_graph()

    nom=2
    for i in range(1,N):
        a1=a[i].split(" ")
        d.add_edge(int(a1[0])-1, int(a1[1])-1, int(a1[3]))
    d.dijkstra(start-1, kon-1, nom, mins)
    d.clear_graph()

    nom=3
    for i in range(1,N):
        a1=a[i].split(" ")
        d.add_edge(int(a1[0])-1, int(a1[1])-1, int(a1[4]))
    d.dijkstra(start-1, kon-1, nom, mins)
    
    mind=1000
    leng=0
    for i in mins:
        leng+=1
    if leng==1:
        print("входной файл имеет некорректные даные")
    for i in mins:
        if i[1]<mind:
            mind=i[1]
    for i in mins:
        if mind==i[1]:
            print("компания номер", i[0],"гарантирует поездку за", i[1])
perem=1
while perem==1:
    print("\nМеню")
    print("Введите 1, чтобы узнать информацию об авторе")
    print("Введите 2, чтобы узнать постановку задачи")
    print("Введите 3, чтобы узнать решение задачи")
    print("Введите 4, чтобы выйти")
    j=int(input())
    if j==1:
        print("Автор: Романова Ангелина Александровна")
    if j==2:
        print("  Таблица стоимости перевозок устроена следующим\n образом: числа, стоящие на пересечении строк и столбцов\n таблиц, обозначают стоимость перевозок между\n соответствующими соседними станциями. Если\n пересечение столбца и строки пусто, то станции не являются\n соседними. Стоимость перевозки по маршруту\n складывается из стоимостей перевозок между соседними\n станциями. Перевозки между населенными пунктами\n осуществляют 3 компании, представившие стоимость своих\n услуг в табличной форме. Определить компанию, которая\n обеспечивает минимальную стоимость перевозки между\n заданными станциями.\n Формат входных данных\n Во входном файле записано число N (1<=N<=100),\n определявшее количество станций. Затем идет описание\n стоимости перевозки по транспортной сети для каждой\n компании, где каждое соединение задается 5 числами -\n номерами узлов, которые она соединяет и три числа,\n определяющие стоимость перевозки для каждой компании.\n Станции между которыми необходимо определить\n минимальную стоимость перевозки, задается\n пользователем.\n Формат выходных данных\n На экран вывести сообщение о стоимости перевозки и\n компании, которая гарантирует эту стоимость.\n")
    if j==3:
        if __name__ == "__main__":
            main()
        print("")
    if j==4:
        perem=0
